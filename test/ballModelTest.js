var assert = require("assert");

describe("ボールモデルは", function() {
	var BallModel = require("../src/ballModel");
	var ballModel = new BallModel();

	before(function(done) {
		ballModel.init();
		done();
	});

	it("ボールを生成できる", function() {
		for(var i=0; i<6; i++) {
			ballModel.generateBalls(i);
			var black=0, white=0;
			for(var j=0; j<ballModel.getNextBalls().length; j++) {
				for(var t=0; t<ballModel.getNextBalls()[j].length; t++) {
					if(ballModel.getNextBalls()[j][t] == 1) {
						black += 1;
					}
					else if(ballModel.getNextBalls()[j][t] == 0) white += 1;
				}
			}
			assert.equal(black, 2);
			assert.equal(white, 2);
		}
	});

	it("カレントのボールを持っている", function() {
		ballModel.generateBalls(3);
		ballModel.moveNext();
		assert.deepEqual(ballModel.getCurrentBalls(), [
			[-1,  1,  1, -1], 
			[-1,  1,  1, -1], 
			[-1, -1, -1, -1], 
			[-1, -1, -1, -1]
		]);
	});

	it("ネクストのボールを持っている", function() {
		ballModel.generateBalls(2);
		assert.deepEqual(ballModel.getNextBalls(), [
			[-1,  1, -1, -1], 
			[-1,  1, -1, -1], 
			[-1,  1, -1, -1], 
			[-1,  1, -1, -1]
		]);
	});

	it("配置用のボードを持っている", function() {
		assert.equal(ballModel.currentBoard.length, 10);
		assert.equal(ballModel.currentBoard[0].length, 10);
	});

	it("配置用のボードをリセットできる", function() {
		ballModel.resetCurrentBoard();
		assert.deepEqual(ballModel.currentBoard, [
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
		]);
	});

	it("カレントのボールをネクストに移せる", function() {
		ballModel.generateBalls(1);
		ballModel.moveNext();
		assert.deepEqual(ballModel.getCurrentBalls(), [
			[-1, -1,  1, -1], 
			[-1, -1,  1, -1], 
			[-1,  1,  1, -1], 
			[-1, -1, -1, -1]
		]);
	});

	it("カレントのボールを配置用のボードに移せる", function() {
		ballModel.generateBalls(1);
		ballModel.moveNext();
		ballModel.deployBalls(3, 0);
		assert.deepEqual(ballModel.getCurrentBoard(), [
			[-1, -1, -1, -1, -1,  1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1,  1, -1, -1, -1, -1],
			[-1, -1, -1, -1,  1,  1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
		]);
	});

	it("ボールを回転できる", function() {
		ballModel.generateBalls(0);
		ballModel.moveNext();
		ballModel.rollBalls([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.deepEqual(ballModel.getCurrentBalls(), [
			[-1, -1, -1, -1],
			[ 1,  1,  1, -1],
			[-1, -1,  1, -1],
			[-1, -1, -1, -1]
		]);
	});

	it("衝突する場合は回転しない", function() {
		ballModel.generateBalls(0);
		ballModel.moveNext();
		ballModel.rollBalls([
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.deepEqual(ballModel.getCurrentBalls(), [
			[-1,  1, -1, -1],
			[-1,  1, -1, -1],
			[-1,  1,  1, -1],
			[-1, -1, -1, -1]
		]);
	});

	it("ボールを一気に落とせる", function() {
		ballModel.generateBalls(5);
		ballModel.moveNext();
		ballModel.dropAllBalls([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		], 4);
		assert.deepEqual(ballModel.getCurrentBoard(), [
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1, -1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1, -1,  1, -1, -1, -1, -1, 9 ],
			[ 9, -1, -1,  1,  1,  1, -1, -1, -1, 9 ],
			[ 9,  9,  9,  9,  9,  9,  9,  9,  9, 9 ]
		]);
	});

	it("ボールを一気に落としたときに衝突が起きたら物理的に落ちる", function() {
		ballModel.generateBalls(5);
		ballModel.moveNext();
		ballModel.dropAllBalls([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1,  0, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		], 4);
		assert.deepEqual(ballModel.getCurrentBoard(), [
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1,  1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1,  1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1,  0,  1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9]
		]);
	});

	it("ボールを1段落とすことができる", function() {
		ballModel.generateBalls(4);
		ballModel.moveNext();
		ballModel.dropOneBalls([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.deepEqual(ballModel.getCurrentBoard(), [
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1,  1,  1, -1, -1, -1, -1],
			[-1, -1, -1,  1,  1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
		]);
	});

	it("ボールを右に移動できる", function() {
		ballModel.generateBalls(0);
		ballModel.moveNext();
		ballModel.moveRight([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.deepEqual(ballModel.getCurrentBoard(), [
			[-1, -1, -1, -1, -1,  1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1,  1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1,  1,  1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
		]);
	});
	
	it("ボールを右に動かしたときに衝突したらfalse", function() {
		var flg;
		ballModel.generateBalls(0);
		ballModel.moveNext();
		flg = ballModel.moveRight([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1,  1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.ok(!flg);
	});

	it("ボールを左に移動できる", function() {
		ballModel.generateBalls(0);
		ballModel.moveNext();
		ballModel.moveLeft([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.deepEqual(ballModel.getCurrentBoard(), [
			[-1, -1, -1,  1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1,  1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1,  1,  1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
			[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
		]);
	});

	it("ボールを右に動かしたときに衝突したらfalse", function() {
		var flg;
		ballModel.generateBalls(0);
		ballModel.moveNext();
		flg = ballModel.moveLeft([
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1, -1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9, -1, -1,  1, -1, -1, -1, -1, -1, 9],
			[9,  9,  9,  9,  9,  9,  9,  9,  9, 9],
		]);
		assert.ok(!flg);
	});
});